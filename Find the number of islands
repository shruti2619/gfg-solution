//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    // Function to find the number of islands.
    
    void bfs(vector<vector<int>> &visited, vector<vector<char>>grid, int m, int n, int row, int col){
        queue<pair<int, int>> q;
        q.push({row, col});
        visited[row][col]=1;
        while(!q.empty()){
            int row= q.front().first;
            int col= q.front().second;
            q.pop();
            for(int delrow= -1; delrow<=1; delrow++){
                for(int delcol=-1; delcol<=1; delcol++){
                    int newrow= row+ delrow;
                    int newcol= col+ delcol;
                    if(newrow>=0 && newrow<n && newcol>=0 && newcol<m && grid[newrow][newcol]=='1'
                    && !visited[newrow][newcol]){
                        q.push({newrow, newcol});
                        visited[newrow][newcol]=1;
                    }
                }
            }
        }
    }
    
    int numIslands(vector<vector<char>>& grid) {
        // Code here
        int count=0;
        int n= grid.size(), m= grid[0].size();
        vector<vector<int>> visited(n, vector<int>(m,0));
        for(int i=0; i<n; i++){
            for(int j=0; j<m ; j++){
                if(!visited[i][j] && grid[i][j]=='1'){
                    count++;
                    bfs(visited, grid, m, n, i, j);
                }
            }
        }
        return count;
    }
};

//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        int ans = obj.numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
// } Driver Code Ends
